name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Usar GitHub-hosted runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Set environment variables for the build
    - name: Set environment variables
      run: |
        echo "BD_NAME=${{ secrets.BD_NAME }}" >> $GITHUB_ENV
        echo "BD_USER=${{ secrets.BD_USER }}" >> $GITHUB_ENV
        echo "BD_PASS=${{ secrets.BD_PASS }}" >> $GITHUB_ENV
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
        echo "MAIL_PASS=${{ secrets.MAIL_PASS }}" >> $GITHUB_ENV
        echo "AWS_EC2_HOST=${{ secrets.AWS_EC2_HOST }}" >> $GITHUB_ENV

    # Replace environment variables in application.properties
    - name: Replace environment variables in application.properties
      run: |
        sed -i 's|\${BD_NAME}|'$BD_NAME'|g' BACK/src/main/resources/application.properties
        sed -i 's|\${BD_USER}|'$BD_USER'|g' BACK/src/main/resources/application.properties
        sed -i 's|\${BD_PASS}|'$BD_PASS'|g' BACK/src/main/resources/application.properties
        sed -i 's|\${JWT_SECRET}|'$JWT_SECRET'|g' BACK/src/main/resources/application.properties
        sed -i 's|\${MAIL_PASS}|'$MAIL_PASS'|g' BACK/src/main/resources/application.properties

    # Set up Java
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Build Backend with environment variables
    - name: Build backend
      run: |
        cd BACK
        mvn clean package

    # Verify the jar file exists
    - name: Verify the jar file
      run: |
        ls -l BACK/target/

    # Deploy to EC2
    - name: Deploy to EC2
      env:
        KEY_FILE: ${{ secrets.AWS_KEY_FILE }}
        HOST: ${{ secrets.AWS_EC2_HOST }}
        USER: ${{ secrets.AWS_EC2_USER }}
      run: |
        echo "$KEY_FILE" | base64 -d > key.pem
        chmod 600 key.pem
        scp -o StrictHostKeyChecking=no -i key.pem BACK/target/bonappetitApi-0.0.1-SNAPSHOT.jar $USER@$HOST:/home/ec2-user/
        ssh -o StrictHostKeyChecking=no -i key.pem $USER@$HOST << 'EOF'
          sudo systemctl stop your-app.service || true
          sudo mv /home/ec2-user/bonappetitApi-0.0.1-SNAPSHOT.jar /path/to/your/app/location/your-app.jar
          cd /path/to/your/app/location/
          nohup java -jar your-app.jar > /dev/null 2>&1 &
        EOF
        rm key.pem

    # Set up Node.js for frontend build
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    # Replace API endpoint in config.js
    - name: Replace API endpoint in config.js
      run: |
        sed -i 's|http://localhost:8080/|http://'"$AWS_EC2_HOST"':8080/|g' FRONT/src/utils/config.js

    - name: Install dependencies
      run: cd FRONT && npm install

    - name: Build Frontend
      run: cd FRONT && npm run build

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        audience: sts.amazonaws.com

    # Sync Frontend to S3
    - name: Sync Frontend to S3
      run: aws s3 sync FRONT/dist/ s3://${{ secrets.AWS_BUCKET_NAME }}/
